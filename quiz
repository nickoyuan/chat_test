import 'package:education/screen/quiz/questions_list.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../VM/time_cubit.dart';

class QuizLayout extends StatefulWidget {
  const QuizLayout({Key? key}) : super(key: key);

  @override
  _QuizLayoutState createState() => _QuizLayoutState();
}

class _QuizLayoutState extends State<QuizLayout> {
  int question_pos = 0;
  int score = 0;
  bool btnPressed = false;
  final PageController _controller = PageController(initialPage: 0);
  String btnText = "Next Question";
  bool answered = false;
  bool shouldShowPrevButton = false;

  @override
  void initState() {
    super.initState();
    _controller.addListener(() {
      setState(() {
        if (_controller.page == 0.0) {
          shouldShowPrevButton = false;
        } else {
          shouldShowPrevButton = true;
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blue[300], // AppColor.primaryColor
      body: Padding(
          padding: const EdgeInsets.all(18.0),
          child: PageView.builder(
            controller: _controller,
            onPageChanged: (page) {
              if (page == questions.length - 1) {
                setState(() {
                  btnText = "See Results";
                });
              }
              setState(() {
                answered = false;
              });
            },
            physics: const NeverScrollableScrollPhysics(),
            itemBuilder: (context, index) {
              return Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  BlocProvider(
                    create: (_) => TimerCubit(),
                    child: buildTimerClock(),
                  ),
                  SizedBox(
                    width: double.infinity,
                    child: Text(
                      // Title Question 1/10
                      "Question ${index + 1}/10",
                      textAlign: TextAlign.start,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 28.0,
                      ),
                    ),
                  ),
                  const Divider(
                    color: Colors.white,
                  ),
                  const SizedBox(
                    height: 10.0,
                  ),
                  SizedBox(
                    width: double.infinity,
                    height: 200.0,
                    child: Text(
                      "${questions[index].question}",
                      // Question "How many etc..."
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 22.0,
                      ),
                    ),
                  ),
                  for (int i = 0; i < questions[index].answers!.length; i++)
                    // Multiple choice answers
                    Container(
                      width: double.infinity,
                      height: 50.0,
                      margin: const EdgeInsets.only(
                          bottom: 20.0, left: 12.0, right: 12.0),
                      child: RawMaterialButton(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8.0),
                        ),
                        fillColor: btnPressed
                            ? questions[index].answers!.values.toList()[i]
                                ? Colors.green
                                : Colors.red
                            : Colors.red, //AppColor.secondaryColor
                        onPressed: !answered
                            ? () {
                                if (questions[index]
                                    .answers!
                                    .values
                                    .toList()[i]) {
                                  score++;
                                  print("yes");
                                } else {
                                  print("no");
                                }
                                setState(() {
                                  btnPressed = true;
                                  answered = true;
                                });
                              }
                            : null,
                        child: Text(questions[index].answers!.keys.toList()[i],
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 18.0,
                            )),
                      ),
                    ),
                  const SizedBox(
                    height: 40.0,
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Visibility(
                        visible: shouldShowPrevButton,
                        child: RawMaterialButton(
                          onPressed: () {
                            _controller.previousPage(
                                duration: const Duration(milliseconds: 250),
                                curve: Curves.easeInExpo);
                          },
                          shape: const StadiumBorder(),
                          fillColor: Colors.blue,
                          padding: const EdgeInsets.all(18.0),
                          elevation: 0.0,
                          child: const Text(
                            "Previous Question",
                            style: TextStyle(color: Colors.white),
                          ),
                        ),
                      ),
                      RawMaterialButton(
                        onPressed: () {
                          if (_controller.page?.toInt() ==
                              questions.length - 1) {
                            Navigator.push(
                                context,
                                MaterialPageRoute(
                                    builder: (context) =>
                                        const QuizLayout())); //ResultScreen(score)
                          } else {
                            _controller.nextPage(
                                duration: const Duration(milliseconds: 250),
                                curve: Curves.easeInExpo);

                            setState(() {
                              btnPressed = false;
                            });
                          }
                        },
                        shape: const StadiumBorder(),
                        fillColor: Colors.blue,
                        padding: const EdgeInsets.all(18.0),
                        elevation: 0.0,
                        child: Text(
                          btnText,
                          style: const TextStyle(color: Colors.white),
                        ),
                      )
                    ],
                  )
                ],
              );
            },
            itemCount: questions.length,
          )),
    );
  }

  Row buildTimerClock() {
    return Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    BlocBuilder<TimerCubit, int>(
                        builder: (context, state) {
                          return Text(
                            context.read<TimerCubit>().timeString,
                            style: const TextStyle(color: Colors.white),
                          );
                        }
                    ),
                    const Icon(Icons.access_alarm, color: Colors.white),
                  ],
                );
  }
}